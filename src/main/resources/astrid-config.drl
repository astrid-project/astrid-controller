//generated from Decision Table
import it.polito.astrid.service.*;
import it.polito.astrid.models.*;
import it.polito.verefoo.astrid.jaxb.Components.*;
import it.polito.verefoo.astrid.jaxb.InfrastructureEvent.*;
import org.springframework.http.ResponseEntity;
import java.math.BigInteger;
declare KafkaMessage
@role( event )
end
// rule values at A11, header at A6
rule "Register Infrastructure info"
        when
                interceptObject: InterceptionRequest(command=="/register/insfrastructure")
                component1: Component(name=="Verefoo")
        then
                RegisterInfrastructureService IS = new RegisterInfrastructureService();
interceptObject.setNfv(IS.registerInfrastructure(interceptObject.getInfo(), component1));
end

// rule values at A12, header at A6
rule "Register Policy"
        when
                interceptObject: InterceptionRequest(command=="/register/policy")
                component1: Component(name=="Verefoo")
                component2: Component(name=="ContextBroker")
        then
                RegisterPolicyService RP = new RegisterPolicyService();
ResponseEntity<String> res = RP.registerPolicy(interceptObject.getPolicy(), component1);
InfrastructureInfoRequest IIR = new InfrastructureInfoRequest(res, component2);
interceptObject.setInfo(IIR.getInfrastructureInfo());
RegisterInfrastructureService IS = new RegisterInfrastructureService();
interceptObject.setNfv(IS.registerInfrastructure(interceptObject.getInfo(), component1));
InstanceFirewallsService IFS = new InstanceFirewallsService(component2, interceptObject.getNfv().getBody());
IFS.instanceFirewallsFromNFV();
end

// rule values at A13, header at A6
rule "Register Event - Add a instance"
        when
                interceptObject: InterceptionRequest(command=="/register/event", event.type=="add")
                component1: Component(name=="Verefoo")
                component2: Component(name=="Astrid_DB")
                component3: Component(name=="ContextBroker")
        then
                RegisterEventService REES = new RegisterEventService();
String graphName = REES.registerEvent(interceptObject.getEvent(), component2);
InfrastructureInfoRequest IIR = new InfrastructureInfoRequest(component3);
interceptObject.setInfo(IIR.getInfrastructureInfo(graphName));
RegisterInfrastructureService IS = new RegisterInfrastructureService();
interceptObject.setNfv(IS.registerInfrastructure(interceptObject.getInfo(), component1));
InstanceFirewallsService IFS = new InstanceFirewallsService(component3, interceptObject.getNfv().getBody());
IFS.instanceFirewallsFromNFV();
end

// rule values at A14, header at A6
rule "Register Event - Remove a instance"
        when
                interceptObject: InterceptionRequest(command=="/register/event", event.type=="delete")
                component1: Component(name=="Verefoo")
                component2: Component(name=="Astrid_DB")
                component3: Component(name=="ContextBroker")
        then
                RegisterEventService REES = new RegisterEventService();
String graphName = REES.registerEvent(interceptObject.getEvent(), component2);
InfrastructureInfoRequest IIR = new InfrastructureInfoRequest(component3);
interceptObject.setInfo(IIR.getInfrastructureInfo(graphName));
RegisterInfrastructureService IS = new RegisterInfrastructureService();
interceptObject.setNfv(IS.registerInfrastructure(interceptObject.getInfo(), component1));
RemoveFirewallsService RFS = new RemoveFirewallsService(component3);
RFS.removeFirewallfromInfrastructureEvent(interceptObject.getEvent());
InstanceFirewallsService IFS = new InstanceFirewallsService(component3, interceptObject.getNfv().getBody());
IFS.instanceFirewallsFromNFV();
end

// rule values at A15, header at A6
rule "Message Attack DDoS LOIC - count"
        when
                k:KafkaMessage(ip:source_ip, attack=="ddos loic")
				numberKafka: KafkaCounter()
        then
                numberKafka.incrementKafkaCounter();
				System.out.println("Drools - Receive a notification of attack from IP: " + ip + ". numberKafka = " + numberKafka.getKafkaCounter());
end

// rule values at A16, header at A6
rule "Attack DDoS LOIC - countermeasures"
        when
                component1: Component(name=="ContextBroker")
                kc:KafkaCounter(counter > 4)
				k:KafkaMessage()
        then
                InstanceFirewallsService IFS = new InstanceFirewallsService(component1, null);
				System.out.println("^^^^^^^^^^^^^^^^^^^^^");
				IFS.instanceFirewallFromKafkaEvent(k);
end


rule "NTP Alarm"
        when
        		k:KafkaMessage(status.mUseCase=="NTP"&&(status.networkStatus=="ALARM"||status.networkStatus=="WARN"))
                component1: Component(name=="ContextBroker")
                ids: DynMonIDs()
        then
        		InstanceEbpf IFS = new InstanceEbpf(component1,ids);
				System.out.println("^^^^^^ NTP ALARM");
				IFS.ebpfAlarmRm("ntp_bau_and_warn",k.status.mUseCase,k.status.networkStatus);
				IFS.ebpfAlarm("ntp_bau_and_warn","ogstun",k.status.networkStatus);
end

rule "NTP BAU"
        when
        		k:KafkaMessage(status.mUseCase=="NTP" && status.networkStatus=="BAU")
                component1: Component(name=="ContextBroker")
                ids: DynMonIDs()
        then
        		InstanceEbpf IFS = new InstanceEbpf(component1,ids);
				System.out.println("^^^^^^ NTP BAU");
				IFS.ebpfAlarmRm("ntp_bau",k.status.mUseCase,k.status.networkStatus);
				IFS.ebpfAlarm("ntp_bau","ogstun",k.status.networkStatus);
end

rule "DNS BAU"
        when
        		k:KafkaMessage(status.mUseCase=="DNS" && status.networkStatus=="BAU")
                component1: Component(name=="ContextBroker")
                ids: DynMonIDs()
        then
        		InstanceEbpf IFS = new InstanceEbpf(component1,ids);
				System.out.println("^^^^^^  DNS BAU");
				IFS.ebpfAlarmRm("dns_bau_ip",k.status.mUseCase,k.status.networkStatus);
				IFS.ebpfAlarm("dns_bau_ip","ogstun",k.status.networkStatus);
end

rule "DNS WARN"
        when
        		k:KafkaMessage(status.mUseCase=="DNS"&&(status.networkStatus=="ALARM"||status.networkStatus=="WARN"))
                component1: Component(name=="ContextBroker")
                ids: DynMonIDs()
        then
        		InstanceEbpf IFS = new InstanceEbpf(component1,ids);
				System.out.println("^^^^^^ DNS WARN");
				IFS.ebpfAlarmRm("dns_warn_ip",k.status.mUseCase,k.status.networkStatus);
				IFS.ebpfAlarm("dns_warn_ip","ogstun",k.status.networkStatus);
end


rule "Register Deployement"
        when
                interceptObject: InterceptionRequest(command=="/register/deployement")
                component1: Component(name=="ContextBroker")
        then
        		InstanceAgents IFS = new InstanceAgents(component1, interceptObject.getDeployement());

end
